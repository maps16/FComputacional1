\documentclass[12pt]{article}
\usepackage[spanish,mexico]{babel}
	\selectlanguage{spanish}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{wrapfig}
\usepackage{float}
\usepackage[utf8]{inputenc}

\usepackage{graphicx}
\graphicspath{{images/}}

%\usepackage{vmargin}
%\setmarginsrb{3 cm}{2.5 cm}{3 cm}{2.5 cm}{1 cm}{1.5 cm}{1 cm}{1.5 cm}

\title{Actividad 2: Elementos de la programación Python 1}
\author{Martin Alejandro Paredes Sosa}
\date{Febrero 2016}

\begin{document}

\maketitle

\section{Introducción}
Esta practica consistio en la realización de los primeros programas en Python del curso de \textit{Física Computacional}. Python es un lenguaje de programación interpretado cuya filosofia se enfoca en la sintaxis que favorezca el codigo legible. Es un lenguaje multiparadigma, ya que soporta lenguaje orientado a objetos, programación imperativa y en menor medida programación funcional. \cite{PyWiki}


\section{Problemas Realizados}

Como ya se menciono antes, esta actividad consistio en la realización de los primeros programas en Python, lo cuales nos permitieron tener un mejor entendimiente de como funciona el lenguaje.\\

Se realizaron un total de 5 problemas, en los cuales se utilizaba diferentes herramientas de Python y sus librerias.

\subsection{Problema 1}

``Se deja caer una pelota desde el techo de una torre de altura h. Se desea saber la altura de la pelota respecto a la torre a un determinado tiempo después de haber sido dejada caer."\cite{act}

\subparagraph*{Programa original}

\begin{verbatim}
h = float(input("Proporciona la altura de la torre: "))
t = float(input("Ingresa el tiempo: "))
s = 0.5*9.81*t**2
print("La altura de la pelota es", h-s, "metros")
\end{verbatim}

En base a este codigo, se modifico para que se introduzca la altura($m$) de la torre y se obtenga un tiempo de vuelo.

\subparagraph*{Programa obtenido: caida.py}
\begin{verbatim}
#Importar funcion sqtr
from math import sqrt

#Pedir al altura a usuario
h = float(input("Proporciona la altura de la torre: "))

g=9.81 #Constate de la gravedad

t=sqrt(2*h/g) #Calculo de tiempo de caida

#Impresion de Resultados
print'El tiempo de caida para una altura ',h,'m es: ', t 

\end{verbatim}
El resultado del programa fue
\begin{verbatim}
In [1]: run caida.py
Proporciona la altura en metros de la torre: 10
El tiempo de caida para una altura  10.0 m es:  1.42784312293 s
\end{verbatim}

\pagebreak
\subsection{Problema 2}

`` Un satélite orbita la Tierra a una altura h, con un periodo T en segundos.
Demuestre que la altitud h del satélite sobre la superficie de la Tierra esta dado por la expresión:

\begin{equation} \label{1}
(R+h)^3=\frac{GMT^2}{4\pi^2}
\end{equation}
donde $G = 6.67\times10^{-11} \frac{Nm^2}{kg^2} $ es la constante de Gravitación Universal de Newton, $M = 5.97 \times 10^{24} kg$ es la masa de la Tierra y $R=6371 km$ es su radio." \cite{act}

\subparagraph*{Demostración}
Suponiendo una órbita circular, tendremos un satélite que orbite a velocidad constante, aplicando la Segunda Ley de Newton, considerando que la aceleración sería centrípeta:

\begin{equation} \label{2}
F=m\frac{v^2}{r}
\end{equation}

Siendo $F$ la fuerza gravitatoria entre la Tierra y el satélite:

\begin{equation} \label{3}
F=\frac{GMm}{r^2}
\end{equation}

Expresamos a la velocidad en términos del período del satélite:

\begin{equation} \label{4}
v=\frac{2\pi r}{T}
\end{equation}

Sustituyendo $v$ en \eqref{2} e igualando con \eqref{3} obtenemos:

\begin{equation} \label{5}
\frac{GMm}{r^2}=m\frac{{(\frac{2\pi r}{T})}^2}{r}
\end{equation}

En el caso más general de un satélite orbitando un planeta, la altura de su órbita no es despreciable respecto al radio de la órbita, por lo que la distancia $r$ es igual a la suma del radio del planeta $R$ más la altura $h$ de la órbita sobre su superficie. Por lo que $r=(R+h)$. Simplificando \eqref{5} y sustituyendo a $r$, llegamos a \eqref{1}:

\begin{equation}
(R+h)^3=\frac{GMT^2}{4\pi^2}
\end{equation}

Para este problema se creo un programa con el cual podremos identicar la altura $h$ de un setelite con un periodo $T$ definido por el usuario.

\subparagraph*{Programa creado: Satelite.py}

\begin{verbatim}
#Impotar el valor de pi
from math import pi

#Definicion de constantes
G = 6.67*(10**(-11)) #Constante de gravitacion
M = 5.97*(10**(24)) #Masa de la tierra en kg
R = 6371000  #Radio de la tierra en m

#Pedir el perido al usuario
t = float(input('Proporciona el periodo del satelite (minutos)'))
#Tranformar el periodo de min -> s
T = t*60

#Calculo de la altura desde la superficie de la tierra de la orbita
H = ((G*M*T**2)/(4*pi**2))**(1./3.)-R

print 'La altura a la que orbita un satelite de periodo ',
 t,'minutos es de ', H,'metros'
\end{verbatim}

Los resultados obtenidos:

\subparagraph*{24 Horas}
\begin{verbatim}
In [1]: run Satelite.py
Proporciona el periodo del satelite (minutos)1440
La altura a la que orbita un satelite de periodo  1440.0 minutos es de  35855910.1762 metros
\end{verbatim}

\subparagraph*{90 minutos}
\begin{verbatim}
In [2]: run Satelite.py
Proporciona el periodo del satelite (minutos)90
La altura a la que orbita un satelite de periodo  90.0 minutos es de  279321.625373 metros
\end{verbatim}

\subparagraph*{45 minutos}
\begin{verbatim}
In [3]: run Satelite.py
Proporciona el periodo del satelite (minutos)45
La altura a la que orbita un satelite de periodo  45.0 minutos es de 
 -2181559.89781 metros

\end{verbatim}
Este ultimo resultado nos indica que no es posible alcanzar este periodo en ninguna altura fuera de la tierra.

\subsection{Problema 3}
``Un punto en el espacio en el sistema de coordenadas polares se describe por las cantidades $(r, \theta)$. La relación entre coordenadas polares y el sistema de coordenadas cartesianos, esta dada por las ecuaciones:  $x = r cos{\theta}, y = r sin{\theta}$. Ingrese el siguiente programa para calcular las coordenadas cartesianas a partir de las coordenadas polares."\cite{act}

\subparagraph*{Programa original}
\begin{verbatim}
from math import sin,cos,pi
r = float(input("Introduce r: "))
d = float(input("Ingresa theta en grados: "))
theta = d*pi/180
x = r*cos(theta)
y = r*sin(theta)
print("x =",x," y =",y)
-----------
Introduce r: 5
Ingresa theta en grados: 30
x = 4.330127018922194  y = 2.4999999999999996
\end{verbatim}

Se creo un programa que calculara las coordenadas esfericas $(r,\theta, \phi)$, a partir de las coordenas cartesianas $(x,y,z)$.

\newpage
\subparagraph*{Programa creado: CordEsferica.py}\cite{CorWiki}

\begin{verbatim}
#Importar Funciones necesarias
from math import acos, atan, sqrt

x = float(input('Componente x: '))
y = float(input('Componente y: '))
z = float(input('Componente z: '))

#Calculo de las coordenadas
r = sqrt(x*x + y*y + z*z) #Norma
   #Angulos
theta = acos(z/r)
phi = atan(y/x)

print 'r= ',r 
print 'theta= ', theta
print 'phi=  ', phi 
\end{verbatim}

Resultados:
\begin{verbatim}
In [1]: run CordEsferica.py
Componente x: 3
Componente y: 4
Componente z: 2
r=  5.38516480713
theta=  1.19028994968
phi=   0.927295218002
\end{verbatim}

\subsection{Problema 4}

``Números pares (even) e impares(odd). Sabemos que los números pares son divisibles entre 2, es decir que su residuo es cero $(2n)$, mientras que los impares tienen residuo 1 $(2n+1)$. Nos apoyamos en la operación de módulo \%."\cite{act}

\begin{verbatim}
n = int(input("Enter an integer: "))
if n%2==0:
     print("even")
else:
     print("odd")
-----------     
Enter an integer: 6
even
\end{verbatim}

``Ingresa el siguiente código que admite 2 enteros, que se utiliza el control \textsc{while} (mientas que). Comprende su dinámica."

\subparagraph*{Programa creado en base al original: ParImpar.py}
\begin{verbatim}

print 'Ingrese dos numeros enteros, un par y un impar'

m = int(input('Ingrese primer numero entero: '))
n = int(input('Ingrese segundo numero entero: '))

while (m+n)%2==0:
    print 'Uno debe ser impar y el otro par, vuelva a intentar'
    m = int(input('Ingrese primer numero entero: '))
    n = int(input('Ingrese segundo numero entero: '))

print 'Los numeros escogidos son ',m,'y ',n
\end{verbatim}
Resultados:
\begin{verbatim}
In [1]: run ParImpar.py
Ingrese dos numeros enteros, un par y un impar
Ingrese primer numero entero: 16
Ingrese segundo numero entero: 2
Uno debe ser impar y el otro par, vuelva a intentar
Ingrese primer numero entero: 15
Ingrese segundo numero entero: 3
Uno debe ser impar y el otro par, vuelva a intentar
Ingrese primer numero entero: 10
Ingrese segundo numero entero: 5
Los numeros escogidos son  10 y  5
\end{verbatim}

\pagebreak

\subsection{Problema 5}

``Los Números de Fibonacci  es una sucesión de números enteros aparecen en toda la naturaleza.  
 
El siguiente programa calcula la secuencia de Fibonacci, introduce la condición de control while (mientras que)"
\subparagraph*{Programa original}
\begin{verbatim}
f1,f2 = 1,1
while f2<1000:
      print(f2)
      f1,f2 = f2,f1+f2
\end{verbatim}
Basándonos en la idea de el programa de la serie se Fibonacci, se creó uno para la secuencia de números de Catalan, dados por la fórmula de recurrencia:
\begin{equation*}
C_0=1, C_{(n+1)} = \frac{2(2n+1)}{(n+2)}C_n
\end{equation*}

\subparagraph*{Programa creado: Catalan.py}
\begin{verbatim}
x1,  n =  1 , 0

while (x1 < 1E+6):
    print x1
    x1 = x1*(4*n+2)/(n+2)
    n+=1
\end{verbatim}
\pagebreak
Resulatado:
\begin{verbatim}
In [1]: run Catalan.py
1
1
2
5
14
42
132
429
1430
4862
16796
58786
208012
742900
\end{verbatim}

%\newpage
\begin{thebibliography}{6}

	\bibitem{PyWiki}
	Wikipedia,(2016)
	\emph{Python}. Recuperado de\\ https://es.wikipedia.org/wiki/Python

	\bibitem{act}
	Lizárraga, C. (2016)
	\emph{Actividad 2 (2016-1)}. Recuperado de\\ 
	http://computacional1.pbworks.com/w/page/104476954/Actividad\%202\%20(2016-1)
	
	\bibitem{CorWiki}
	Wikipedia,(2016)
	\emph{Spherical coordinate system}. Recuperado de\\ 
	https://en.wikipedia.org/wiki/Spherical$_{}$coordinate$_{}$system\#Coordinate$_{}$system$_{}$conversions

\end{thebibliography}


\end{document}
